/**
 * Script para resetar completamente o banco de dados e sess√µes do WhatsApp
 * Este script:
 * 1. Tenta limpar todas as tabelas usando Sequelize (op√ß√£o mais segura)
 * 2. Exclui o arquivo do banco de dados SQLite (reset completo)
 * 3. Opcionalmente limpa as sess√µes do WhatsApp (descomentando o c√≥digo)
 */

const fs = require('fs');
const path = require('path');

// Caminho para o arquivo do banco de dados SQLite
const dbPath = path.join(__dirname, 'database.sqlite');

// Caminho para os diret√≥rios de sess√£o do WhatsApp
const sessionDir = path.join(__dirname, '.wwebjs_sessions');

async function resetEverything() {
  console.log('üßπ Iniciando limpeza completa do sistema...');
  
  // Parte 1: Tentar limpar as tabelas usando Sequelize
  try {
    console.log('üìä Tentando limpar tabelas via Sequelize...');
    
    // Importar os modelos e conex√£o do banco de dados
    const db = require('./db/database');
    const { User, BotConfig, Conversation, EmailConfig } = require('./models/index');
    
    // Desativar restri√ß√µes de chave estrangeira
    await db.query('PRAGMA foreign_keys = OFF;');
    
    // Limpar tabelas na ordem correta
    try {
      await Conversation.destroy({ where: {}, truncate: true, cascade: true });
      console.log('‚úÖ Tabela Conversation limpa');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao limpar Conversation:', e.message);
    }
    
    try {
      await EmailConfig.destroy({ where: {}, truncate: true, cascade: true });
      console.log('‚úÖ Tabela EmailConfig limpa');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao limpar EmailConfig:', e.message);
    }
    
    try {
      await BotConfig.destroy({ where: {}, truncate: true, cascade: true });
      console.log('‚úÖ Tabela BotConfig limpa');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao limpar BotConfig:', e.message);
    }
    
    try {
      await User.destroy({ where: {}, truncate: true, cascade: true });
      console.log('‚úÖ Tabela User limpa');
    } catch (e) {
      console.log('‚ö†Ô∏è Erro ao limpar User:', e.message);
    }
    
    // Limpar sess√µes
    try {
      const Session = db.models.Session;
      if (Session) {
        await Session.destroy({ where: {}, truncate: true, cascade: true });
        console.log('‚úÖ Tabela Session limpa');
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è Nota: Tabela Session n√£o encontrada ou n√£o p√¥de ser limpa');
    }
    
    // Reativar restri√ß√µes
    await db.query('PRAGMA foreign_keys = ON;');
    
    // Fechar conex√£o
    await db.close();
    
    console.log('‚úÖ Limpeza de tabelas via Sequelize conclu√≠da');
  } catch (error) {
    console.error('‚ùå Erro durante limpeza via Sequelize:', error.message);
    console.log('‚ö†Ô∏è Continuando com exclus√£o do arquivo de banco de dados...');
  }
  
  // Parte 2: Excluir o arquivo do banco de dados
  try {
    if (fs.existsSync(dbPath)) {
      console.log(`üóëÔ∏è Excluindo arquivo do banco de dados: ${dbPath}`);
      fs.unlinkSync(dbPath);
      console.log(`‚úÖ Arquivo do banco de dados exclu√≠do`);
    } else {
      console.log(`üîç Arquivo do banco de dados n√£o encontrado: ${dbPath}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao excluir o arquivo do banco de dados: ${error.message}`);
  }
  
  // Parte 3: Limpar diret√≥rios de sess√£o do WhatsApp
  // DESCOMENTE AS LINHAS ABAIXO SE QUISER LIMPAR AS SESS√ïES DO WHATSAPP
  /*
  try {
    if (fs.existsSync(sessionDir)) {
      console.log(`üóëÔ∏è Removendo diret√≥rio de sess√µes: ${sessionDir}`);
      deleteFolderRecursive(sessionDir);
      console.log('‚úÖ Diret√≥rio de sess√µes removido com sucesso');
    } else {
      console.log(`üîç Diret√≥rio de sess√µes n√£o encontrado: ${sessionDir}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao excluir diret√≥rio de sess√µes: ${error.message}`);
  }
  */
  
  console.log('');
  console.log('‚úÖ‚úÖ‚úÖ Reset do sistema conclu√≠do! ‚úÖ‚úÖ‚úÖ');
  console.log('');
  console.log('Observa√ß√µes:');
  console.log('1. Um novo banco de dados ser√° criado quando o servidor for reiniciado');
  console.log('2. Voc√™ precisar√° criar um novo usu√°rio ap√≥s o rein√≠cio');
  console.log('3. As sess√µes do WhatsApp permanecem (descomente o c√≥digo para remov√™-las)');
  console.log('');
  console.log('Para reiniciar o servidor:');
  console.log('pm2 restart whatsgpt');
}

// Fun√ß√£o auxiliar para excluir diret√≥rios recursivamente
function deleteFolderRecursive(folderPath) {
  if (fs.existsSync(folderPath)) {
    fs.readdirSync(folderPath).forEach((file) => {
      const curPath = path.join(folderPath, file);
      
      if (fs.lstatSync(curPath).isDirectory()) {
        // Se for um diret√≥rio, chama a fun√ß√£o recursivamente
        deleteFolderRecursive(curPath);
      } else {
        // Se for um arquivo, exclui
        fs.unlinkSync(curPath);
      }
    });
    
    // Depois de excluir todo o conte√∫do, remove o diret√≥rio
    fs.rmdirSync(folderPath);
  }
}

// Executar o reset
resetEverything()
  .then(() => {
    console.log('Script finalizado com sucesso.');
    process.exit(0);
  })
  .catch((err) => {
    console.error('Erro durante execu√ß√£o do script:', err);
    process.exit(1);
  }); 