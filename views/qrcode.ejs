<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WhatsApp QR Code - WhatGPT</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
    }
    .qrcode-container {
      max-width: 350px;
      margin: 0 auto;
      background-color: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 20px;
      text-align: center;
      margin-top: 50px;
    }
    .qrcode-img {
      width: 100%;
      height: auto;
      max-width: 300px;
      border-radius: 8px;
    }
    .status-badge {
      display: inline-block;
      padding: 6px 12px;
      border-radius: 16px;
      font-size: 14px;
      font-weight: 500;
      margin-bottom: 16px;
    }
    .status-pending {
      background-color: #FEF3C7;
      color: #92400E;
    }
    .status-authenticated {
      background-color: #D1FAE5;
      color: #065F46;
    }
    .status-connected {
      background-color: #6EE7B7;
      color: #064E3B;
    }
    .status-expired {
      background-color: #FEE2E2;
      color: #991B1B;
    }
    .instructions {
      font-size: 14px;
      color: #555;
      margin-top: 20px;
      text-align: left;
    }
    .actions {
      margin-top: 24px;
    }
    .spinner-border {
      width: 20px;
      height: 20px;
      margin-right: 8px;
    }
    .hidden {
      display: none;
    }
    .phone-number {
      font-size: 16px;
      font-weight: 500;
      margin-top: 12px;
      color: #0C4A6E;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="qrcode-container">
      <h3 class="mb-3">WhatsApp QR Code</h3>
      
      <div id="status-container">
        <span class="status-badge status-pending" id="status-badge">Gerando QR Code...</span>
      </div>
      
      <div id="qrcode-display">
        <div class="text-center mb-3">
          <div class="spinner-border text-success" role="status">
            <span class="visually-hidden">Carregando...</span>
          </div>
          <span>Gerando QR Code...</span>
        </div>
      </div>
      
      <div id="phone-info" class="hidden">
        <div class="phone-number" id="phone-number"></div>
      </div>
      
      <div class="actions">
        <button class="btn btn-primary" id="generate-btn">Gerar Novo QR Code</button>
      </div>
      
      <div class="instructions mt-4">
        <p><strong>Instruções:</strong></p>
        <ol>
          <li>Abra o WhatsApp no seu celular</li>
          <li>Toque em Menu ou Configurações e selecione WhatsApp Web</li>
          <li>Aponte seu celular para este QR Code para escanear</li>
          <li>A conexão será estabelecida automaticamente</li>
        </ol>
        <p class="mt-2"><small>Cada QR Code é válido por 5 minutos. Após esse período, clique em "Gerar Novo QR Code".</small></p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elementos da página
      const qrcodeDisplay = document.getElementById('qrcode-display');
      const statusBadge = document.getElementById('status-badge');
      const generateBtn = document.getElementById('generate-btn');
      const phoneInfo = document.getElementById('phone-info');
      const phoneNumber = document.getElementById('phone-number');
      
      // Variáveis de estado
      let currentSessionId = null;
      let statusCheckInterval = null;
      let qrExpireTimeout = null;
      
      // Função para gerar novo QR Code
      async function generateQRCode() {
        try {
          // Limpar intervalos e timeouts anteriores
          if (statusCheckInterval) clearInterval(statusCheckInterval);
          if (qrExpireTimeout) clearTimeout(qrExpireTimeout);
          
          // Atualizar UI para estado de carregamento
          qrcodeDisplay.innerHTML = `
            <div class="text-center mb-3">
              <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Carregando...</span>
              </div>
              <span>Gerando QR Code...</span>
            </div>
          `;
          
          updateStatus('pending', 'Gerando QR Code...');
          phoneInfo.classList.add('hidden');
          
          // Fazer requisição para gerar novo QR Code
          const response = await fetch('/api/qrcode/generate');
          const data = await response.json();
          
          if (!data.success) {
            throw new Error(data.message || 'Erro ao gerar QR Code');
          }
          
          // Salvar ID da sessão
          currentSessionId = data.sessionId;
          
          // Iniciar verificação de status
          startStatusCheck();
          
          // Definir timeout para expiração (4:30 minutos)
          qrExpireTimeout = setTimeout(() => {
            updateStatus('expired', 'QR Code expirado');
          }, 4.5 * 60 * 1000);
          
          // Obter QR code após um pequeno delay
          setTimeout(fetchQRCode, 2000);
        } catch (error) {
          console.error('Erro ao gerar QR Code:', error);
          qrcodeDisplay.innerHTML = `
            <div class="alert alert-danger">
              Erro ao gerar QR Code: ${error.message}
            </div>
          `;
          updateStatus('expired', 'Falha ao gerar QR Code');
        }
      }
      
      // Função para atualizar o status exibido
      function updateStatus(status, message) {
        statusBadge.className = `status-badge status-${status}`;
        statusBadge.textContent = message;
      }
      
      // Função para buscar QR code
      async function fetchQRCode() {
        if (!currentSessionId) return;
        
        try {
          const response = await fetch(`/api/qrcode/${currentSessionId}`);
          const data = await response.json();
          
          if (response.status === 202) {
            // QR code ainda não gerado, tentar novamente em 2 segundos
            setTimeout(fetchQRCode, 2000);
            return;
          }
          
          if (!data.success) {
            throw new Error(data.message || 'Erro ao obter QR Code');
          }
          
          // Se autenticado ou conectado
          if (data.status === 'authenticated' || data.status === 'connected') {
            handleAuthenticated(data);
            return;
          }
          
          // Se expirado
          if (data.status === 'expired') {
            handleExpired();
            return;
          }
          
          // Exibir QR code
          qrcodeDisplay.innerHTML = `
            <img src="${data.qrCode}" alt="WhatsApp QR Code" class="qrcode-img">
          `;
          
          updateStatus('pending', 'Aguardando escaneamento...');
        } catch (error) {
          console.error('Erro ao buscar QR Code:', error);
          setTimeout(fetchQRCode, 5000);
        }
      }
      
      // Iniciar verificação periódica de status
      function startStatusCheck() {
        if (statusCheckInterval) clearInterval(statusCheckInterval);
        
        statusCheckInterval = setInterval(async () => {
          if (!currentSessionId) return;
          
          try {
            const response = await fetch(`/api/qrcode/${currentSessionId}/status`);
            const data = await response.json();
            
            if (!data.success) return;
            
            // Se autenticado ou conectado
            if (data.status === 'authenticated' || data.status === 'connected') {
              handleAuthenticated(data);
              clearInterval(statusCheckInterval);
            }
            
            // Se expirado
            if (data.status === 'expired') {
              handleExpired();
              clearInterval(statusCheckInterval);
            }
          } catch (error) {
            console.error('Erro ao verificar status:', error);
          }
        }, 3000);
      }
      
      // Lidar com estado autenticado/conectado
      function handleAuthenticated(data) {
        updateStatus('connected', 'Conectado ao WhatsApp');
        
        qrcodeDisplay.innerHTML = `
          <div class="alert alert-success">
            <i class="bi bi-check-circle-fill"></i>
            WhatsApp conectado com sucesso!
          </div>
          <div class="mt-3">
            <p>Redirecionando para a página de configuração...</p>
            <div class="spinner-border text-success" role="status">
              <span class="visually-hidden">Carregando...</span>
            </div>
          </div>
        `;
        
        if (data.phoneNumber) {
          phoneNumber.textContent = `Número: +${data.phoneNumber}`;
          phoneInfo.classList.remove('hidden');
        }
        
        if (qrExpireTimeout) clearTimeout(qrExpireTimeout);
        
        // Redirecionar para a página de configuração após autenticação
        setTimeout(() => {
          window.location.href = '/config';
        }, 2000);
      }
      
      // Lidar com QR code expirado
      function handleExpired() {
        updateStatus('expired', 'QR Code expirado');
        
        qrcodeDisplay.innerHTML = `
          <div class="alert alert-warning">
            QR Code expirado. Gere um novo para continuar.
          </div>
        `;
        
        if (statusCheckInterval) clearInterval(statusCheckInterval);
      }
      
      // Event listener para o botão de gerar novo QR Code
      generateBtn.addEventListener('click', generateQRCode);
      
      // Gerar QR Code ao carregar a página
      generateQRCode();
    });
  </script>
</body>
</html> 